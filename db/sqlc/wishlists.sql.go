// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: wishlists.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createWishlists = `-- name: CreateWishlists :one
INSERT INTO wishlists (
    wl_id,
    user_id,
    product_id
) VALUES (
    $1,
    $2,
    $3
) RETURNING wl_id, user_id, product_id, created_at, updated_at
`

type CreateWishlistsParams struct {
	WlID      uuid.UUID `json:"wl_id"`
	UserID    uuid.UUID `json:"user_id"`
	ProductID string    `json:"product_id"`
}

func (q *Queries) CreateWishlists(ctx context.Context, arg CreateWishlistsParams) (Wishlist, error) {
	row := q.db.QueryRow(ctx, createWishlists, arg.WlID, arg.UserID, arg.ProductID)
	var i Wishlist
	err := row.Scan(
		&i.WlID,
		&i.UserID,
		&i.ProductID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteWishlistsByWlid = `-- name: DeleteWishlistsByWlid :exec
DELETE FROM 
    wishlists
WHERE 
    wl_id = $1
`

func (q *Queries) DeleteWishlistsByWlid(ctx context.Context, wlID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteWishlistsByWlid, wlID)
	return err
}

const getWishlistsByProductId = `-- name: GetWishlistsByProductId :many
SELECT 
    wl_id, user_id, product_id, created_at, updated_at
FROM 
    wishlists
WHERE 
    product_id = $1
`

func (q *Queries) GetWishlistsByProductId(ctx context.Context, productID string) ([]Wishlist, error) {
	rows, err := q.db.Query(ctx, getWishlistsByProductId, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Wishlist{}
	for rows.Next() {
		var i Wishlist
		if err := rows.Scan(
			&i.WlID,
			&i.UserID,
			&i.ProductID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWishlistsByUserId = `-- name: GetWishlistsByUserId :many
SELECT 
    wl_id, user_id, product_id, created_at, updated_at
FROM 
    wishlists
WHERE 
    user_id = $1
`

func (q *Queries) GetWishlistsByUserId(ctx context.Context, userID uuid.UUID) ([]Wishlist, error) {
	rows, err := q.db.Query(ctx, getWishlistsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Wishlist{}
	for rows.Next() {
		var i Wishlist
		if err := rows.Scan(
			&i.WlID,
			&i.UserID,
			&i.ProductID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWishlistsList = `-- name: GetWishlistsList :many
SELECT 
    wl_id, user_id, product_id, created_at, updated_at
FROM 
    wishlists
`

func (q *Queries) GetWishlistsList(ctx context.Context) ([]Wishlist, error) {
	rows, err := q.db.Query(ctx, getWishlistsList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Wishlist{}
	for rows.Next() {
		var i Wishlist
		if err := rows.Scan(
			&i.WlID,
			&i.UserID,
			&i.ProductID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
